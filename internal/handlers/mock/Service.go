// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mmfshirokan/medodsProject/internal/model"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, rft
func (_m *Service) Add(ctx context.Context, rft model.RefreshToken) (model.RefreshToken, error) {
	ret := _m.Called(ctx, rft)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 model.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshToken) (model.RefreshToken, error)); ok {
		return rf(ctx, rft)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshToken) model.RefreshToken); ok {
		r0 = rf(ctx, rft)
	} else {
		r0 = ret.Get(0).(model.RefreshToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RefreshToken) error); ok {
		r1 = rf(ctx, rft)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Service_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - rft model.RefreshToken
func (_e *Service_Expecter) Add(ctx interface{}, rft interface{}) *Service_Add_Call {
	return &Service_Add_Call{Call: _e.mock.On("Add", ctx, rft)}
}

func (_c *Service_Add_Call) Run(run func(ctx context.Context, rft model.RefreshToken)) *Service_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RefreshToken))
	})
	return _c
}

func (_c *Service_Add_Call) Return(_a0 model.RefreshToken, _a1 error) *Service_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Add_Call) RunAndReturn(run func(context.Context, model.RefreshToken) (model.RefreshToken, error)) *Service_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, rftID
func (_m *Service) Delete(ctx context.Context, rftID uuid.UUID) error {
	ret := _m.Called(ctx, rftID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, rftID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Service_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - rftID uuid.UUID
func (_e *Service_Expecter) Delete(ctx interface{}, rftID interface{}) *Service_Delete_Call {
	return &Service_Delete_Call{Call: _e.mock.On("Delete", ctx, rftID)}
}

func (_c *Service_Delete_Call) Run(run func(ctx context.Context, rftID uuid.UUID)) *Service_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_Delete_Call) Return(_a0 error) *Service_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Service_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePWD provides a mock function with given fields: ctx, usrID, pwd
func (_m *Service) ValidatePWD(ctx context.Context, usrID uuid.UUID, pwd string) (bool, error) {
	ret := _m.Called(ctx, usrID, pwd)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePWD")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (bool, error)); ok {
		return rf(ctx, usrID, pwd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) bool); ok {
		r0 = rf(ctx, usrID, pwd)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, usrID, pwd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_ValidatePWD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePWD'
type Service_ValidatePWD_Call struct {
	*mock.Call
}

// ValidatePWD is a helper method to define mock.On call
//   - ctx context.Context
//   - usrID uuid.UUID
//   - pwd string
func (_e *Service_Expecter) ValidatePWD(ctx interface{}, usrID interface{}, pwd interface{}) *Service_ValidatePWD_Call {
	return &Service_ValidatePWD_Call{Call: _e.mock.On("ValidatePWD", ctx, usrID, pwd)}
}

func (_c *Service_ValidatePWD_Call) Run(run func(ctx context.Context, usrID uuid.UUID, pwd string)) *Service_ValidatePWD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *Service_ValidatePWD_Call) Return(_a0 bool, _a1 error) *Service_ValidatePWD_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_ValidatePWD_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (bool, error)) *Service_ValidatePWD_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRFT provides a mock function with given fields: ctx, rftID
func (_m *Service) ValidateRFT(ctx context.Context, rftID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, rftID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRFT")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, rftID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, rftID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, rftID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_ValidateRFT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRFT'
type Service_ValidateRFT_Call struct {
	*mock.Call
}

// ValidateRFT is a helper method to define mock.On call
//   - ctx context.Context
//   - rftID uuid.UUID
func (_e *Service_Expecter) ValidateRFT(ctx interface{}, rftID interface{}) *Service_ValidateRFT_Call {
	return &Service_ValidateRFT_Call{Call: _e.mock.On("ValidateRFT", ctx, rftID)}
}

func (_c *Service_ValidateRFT_Call) Run(run func(ctx context.Context, rftID uuid.UUID)) *Service_ValidateRFT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Service_ValidateRFT_Call) Return(_a0 bool, _a1 error) *Service_ValidateRFT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_ValidateRFT_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *Service_ValidateRFT_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
